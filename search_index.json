[["biomedicalKnowledge.html", "Biomedical Knowledge Mining using GOSemSim and clusterProfiler üìñ Introduction üéØ Motivation üìù Citation üìö Book structure üíñ Want to help? Chapter 1 Overview of semantic similarity analysis 1.1 Information content-based methods 1.2 Graph-based method 1.3 Combine methods 1.4 Summary Chapter 2 GO semantic similarity analysis 2.1 Semantic data 2.2 Supported organisms 2.3 GO semantic similarity measurement 2.4 Gene semantic similarity measurement 2.5 Gene cluster semantic similarity measurement 2.6 Applications Chapter 3 DO semantic similarity analysis 3.1 DO term semantic similarity measurement 3.2 Gene semantic similarity measurement 3.3 Gene cluster semantic similarity measurement Chapter 4 MeSH semantic similarity analysis 4.1 Supported organisms 4.2 MeSH semantic similarity measurement 4.3 Gene semantic similarity measurement Chapter 5 Overview of enrichment analysis 5.1 Terminology 5.2 Over Representation Analysis 5.3 Gene Set Enrichment Analysis 5.4 Leading edge analysis and core enriched genes Chapter 6 GO enrichment analysis 6.1 Supported organisms 6.2 GO classification 6.3 GO over-representation analysis 6.4 GO Gene Set Enrichment Analysis 6.5 GO analysis for non-model organisms 6.6 Visualize enriched GO terms as a directed acyclic graph 6.7 Summary Chapter 7 KEGG enrichment analysis 7.1 Supported organisms 7.2 KEGG pathway over-representation analysis 7.3 KEGG pathway gene set enrichment analysis 7.4 KEGG module over-representation analysis 7.5 KEGG module gene set enrichment analysis 7.6 Visualize enriched KEGG pathways Chapter 8 WikiPathways analysis 8.1 WikiPathways over-representation analysis 8.2 WikiPathways gene set enrichment analysis Chapter 9 Reactome enrichment analysis 9.1 Supported organisms 9.2 Reactome pathway over-representation analysis 9.3 Reactome pathway gene set enrichment analysis 9.4 Pathway Visualization 9.5 Pathway analysis of NGS data 9.6 Visualize enrichment result 9.7 Visualize GSEA result 9.8 Comparing enriched reactome pathways among gene clusters with clusterProfiler Chapter 10 Disease enrichment analysis 10.1 Disease over-representation analysis 10.2 Disease gene set enrichment analysis Chapter 11 MeSH enrichment analysis 11.1 MeSH over-representation analysis 11.2 MeSH gene set enrichment analysis Chapter 12 Universal enrichment analysis 12.1 Input data 12.2 Cell Marker 12.3 MSigDb analysis Chapter 13 Functional enrichment analysis of genomic coordinations Chapter 14 Biological theme comparison 14.1 Comparing multiple gene lists 14.2 Formula interface of compareCluster 14.3 Visualization of profile comparison 14.4 Summary Chapter 15 Visualization of functional enrichment result 15.1 Bar Plot 15.2 Dot plot 15.3 Gene-Concept Network 15.4 Heatmap-like functional classification 15.5 Enrichment Map 15.6 Biological theme comparison 15.7 UpSet Plot 15.8 ridgeline plot for expression distribution of GSEA result 15.9 running score and preranked list of GSEA result 15.10 pubmed trend of enriched terms Chapter 16 dplyr verbs for manipulating enrichment result 16.1 filter 16.2 arrange 16.3 select 16.4 mutate 16.5 slice 16.6 summarise Chapter 17 Useful utilities 17.1 Translating Biological ID 17.2 setReadable: translating gene IDs to human readable symbols 17.3 Parsing GMT files 17.4 GO utilities A Frequently asked questions A.1 How to prepare your own geneList A.2 No gene can be mapped A.3 Showing specific pathways A.4 How to extract genes of a specific term/pathway References", " Biomedical Knowledge Mining using GOSemSim and clusterProfiler Guangchuang Yu 2021-08-14 üìñ Introduction Placeholder üéØ Motivation üìù Citation üìö Book structure üíñ Want to help? Chapter 1 Overview of semantic similarity analysis Placeholder 1.1 Information content-based methods 1.1.1 Resnik method 1.1.2 Lin method 1.1.3 Rel method 1.1.4 Jiang method 1.2 Graph-based method 1.2.1 Wang method 1.3 Combine methods 1.3.1 max 1.3.2 avg 1.3.3 rcmax 1.3.4 BMA 1.4 Summary Chapter 2 GO semantic similarity analysis Placeholder 2.1 Semantic data 2.2 Supported organisms 2.3 GO semantic similarity measurement 2.4 Gene semantic similarity measurement 2.5 Gene cluster semantic similarity measurement 2.6 Applications Chapter 3 DO semantic similarity analysis Placeholder 3.1 DO term semantic similarity measurement 3.2 Gene semantic similarity measurement 3.3 Gene cluster semantic similarity measurement Chapter 4 MeSH semantic similarity analysis Placeholder 4.1 Supported organisms 4.2 MeSH semantic similarity measurement 4.3 Gene semantic similarity measurement Chapter 5 Overview of enrichment analysis Placeholder 5.1 Terminology 5.1.1 Gene sets and pathway 5.1.2 Gene Ontology (GO) 5.1.3 Kyoto Encyclopedia of Genes and Genomes (KEGG) 5.1.4 Other gene sets 5.2 Over Representation Analysis 5.3 Gene Set Enrichment Analysis 5.4 Leading edge analysis and core enriched genes Chapter 6 GO enrichment analysis Placeholder 6.1 Supported organisms 6.2 GO classification 6.3 GO over-representation analysis 6.4 GO Gene Set Enrichment Analysis 6.5 GO analysis for non-model organisms 6.6 Visualize enriched GO terms as a directed acyclic graph 6.7 Summary Chapter 7 KEGG enrichment analysis Placeholder 7.1 Supported organisms 7.2 KEGG pathway over-representation analysis 7.3 KEGG pathway gene set enrichment analysis 7.4 KEGG module over-representation analysis 7.5 KEGG module gene set enrichment analysis 7.6 Visualize enriched KEGG pathways Chapter 8 WikiPathways analysis Placeholder 8.1 WikiPathways over-representation analysis 8.2 WikiPathways gene set enrichment analysis Chapter 9 Reactome enrichment analysis Placeholder 9.1 Supported organisms 9.2 Reactome pathway over-representation analysis 9.3 Reactome pathway gene set enrichment analysis 9.4 Pathway Visualization 9.5 Pathway analysis of NGS data 9.6 Visualize enrichment result 9.7 Visualize GSEA result 9.8 Comparing enriched reactome pathways among gene clusters with clusterProfiler Chapter 10 Disease enrichment analysis Placeholder 10.1 Disease over-representation analysis 10.1.1 Over-representation analysis for disease ontology 10.1.2 Over-representation analysis for the network of cancer gene 10.1.3 Over-representation analysis for the disease gene network 10.2 Disease gene set enrichment analysis 10.2.1 gseDO fuction 10.2.2 gseNCG fuction 10.2.3 gseDGN fuction Chapter 11 MeSH enrichment analysis Placeholder 11.1 MeSH over-representation analysis 11.2 MeSH gene set enrichment analysis Chapter 12 Universal enrichment analysis Placeholder 12.1 Input data 12.2 Cell Marker 12.2.1 Cell Marker over-presentaton analysis 12.2.2 Cell Marker gene set enrichment analysis 12.3 MSigDb analysis 12.3.1 MSigDb over-presentaton analysis 12.3.2 MSigDb gene set enrichment analysis Chapter 13 Functional enrichment analysis of genomic coordinations Functional analysis using NGS data (eg, RNA-Seq and ChIP-Seq) can be performed by linking coding and non-coding regions to coding genes via ChIPseeker (Yu, Wang, and He 2015) package, which can annotates genomic regions to their nearest genes, host genes, and flanking genes respectivly. In addtion, it provides a function, seq2gene, that simultaneously considering host genes, promoter region and flanking gene from intergenic region that may under control via cis-regulation. This function maps genomic regions to genes in a many-to-many manner and facilitate functional analysis. For more details, please refer to ChIPseeker (Yu, Wang, and He 2015). Chapter 14 Biological theme comparison The clusterProfiler package was developed for biological theme comparison (Yu et al. 2012; Wu et al. 2021), and it provides a function, compareCluster, to automatically calculate enriched functional profiles of each gene clusters and aggregate the results into a single object. Comparing functional profiles can reveal functional consensus and differences among different experiments and helps in identifying differential functional modules in omics datasets. 14.1 Comparing multiple gene lists The compareCluster() function applies selected function (via the fun parameter) to perform enrichment analysis for each gene list. data(gcSample) str(gcSample) ## List of 8 ## $ X1: chr [1:216] &quot;4597&quot; &quot;7111&quot; &quot;5266&quot; &quot;2175&quot; ... ## $ X2: chr [1:805] &quot;23450&quot; &quot;5160&quot; &quot;7126&quot; &quot;26118&quot; ... ## $ X3: chr [1:392] &quot;894&quot; &quot;7057&quot; &quot;22906&quot; &quot;3339&quot; ... ## $ X4: chr [1:838] &quot;5573&quot; &quot;7453&quot; &quot;5245&quot; &quot;23450&quot; ... ## $ X5: chr [1:929] &quot;5982&quot; &quot;7318&quot; &quot;6352&quot; &quot;2101&quot; ... ## $ X6: chr [1:585] &quot;5337&quot; &quot;9295&quot; &quot;4035&quot; &quot;811&quot; ... ## $ X7: chr [1:582] &quot;2621&quot; &quot;2665&quot; &quot;5690&quot; &quot;3608&quot; ... ## $ X8: chr [1:237] &quot;2665&quot; &quot;4735&quot; &quot;1327&quot; &quot;3192&quot; ... Users can use a named list of gene IDs as the input that passed to the geneCluster parameter. ck &lt;- compareCluster(geneCluster = gcSample, fun = enrichKEGG) ck &lt;- setReadable(ck, OrgDb = org.Hs.eg.db, keyType=&quot;ENTREZID&quot;) head(ck) ## Cluster ID Description GeneRatio BgRatio ## 1 X2 hsa04110 Cell cycle 18/380 124/8087 ## 2 X2 hsa05169 Epstein-Barr virus infection 23/380 202/8087 ## 3 X2 hsa05340 Primary immunodeficiency 8/380 38/8087 ## 4 X2 hsa05166 Human T-cell leukemia virus 1 infection 22/380 219/8087 ## 5 X3 hsa04512 ECM-receptor interaction 9/186 88/8087 ## 6 X3 hsa04060 Cytokine-cytokine receptor interaction 17/186 295/8087 ## pvalue p.adjust qvalue ## 1 1.747566e-05 0.005242697 0.004874788 ## 2 6.970114e-05 0.010455171 0.009721475 ## 3 3.117722e-04 0.031177224 0.028989348 ## 4 5.993266e-04 0.044949493 0.041795143 ## 5 1.772661e-04 0.042517822 0.039650400 ## 6 4.326582e-04 0.042517822 0.039650400 ## geneID ## 1 CDC20/E2F1/CCNA2/E2F3/BUB1B/CDC6/DBF4/PKMYT1/CDC7/ESPL1/CCNE2/CDKN2A/SFN/BUB1/CHEK2/ORC6/CDC14B/MCM4 ## 2 LYN/ICAM1/TNFAIP3/E2F1/CCNA2/E2F3/BAK1/RUNX3/BID/IKBKE/TAP2/FAS/CCNE2/RELB/CD3E/ENTPD3/SYK/TRAF3/IKBKB/CD247/NEDD4/CD40/STAT1 ## 3 ADA/TAP2/LCK/CD79A/CD3E/CD8A/CD40/DCLRE1C ## 4 ICAM1/CDC20/E2F1/CCNA2/E2F3/ADCY7/BUB1B/ESPL1/LCK/CCNE2/RELB/CD3E/MSX1/IL15/CDKN2A/IKBKB/RANBP3/MSX2/CHEK2/NFATC4/MAP3K1/CD40 ## 5 THBS1/HSPG2/COL9A3/ITGB7/CHAD/ITGA7/LAMA4/ITGB8/ITGB5 ## 6 CXCL1/TNFRSF11B/LIFR/XCL1/GDF5/TNFRSF17/TNFRSF11A/IL5RA/EPOR/CSF2RA/TNFRSF25/BMP7/BMP4/GDF11/IL21R/IL23A/TGFB2 ## Count ## 1 18 ## 2 23 ## 3 8 ## 4 22 ## 5 9 ## 6 17 14.2 Formula interface of compareCluster As an alternaitve to using named list, the compareCluster() function also supports passing a formula to describe more complicated experimental designs (e.g., \\(Gene \\sim time + treatment\\)). mydf &lt;- data.frame(Entrez=names(geneList), FC=geneList) mydf &lt;- mydf[abs(mydf$FC) &gt; 1,] mydf$group &lt;- &quot;upregulated&quot; mydf$group[mydf$FC &lt; 0] &lt;- &quot;downregulated&quot; mydf$othergroup &lt;- &quot;A&quot; mydf$othergroup[abs(mydf$FC) &gt; 2] &lt;- &quot;B&quot; formula_res &lt;- compareCluster(Entrez~group+othergroup, data=mydf, fun=&quot;enrichKEGG&quot;) head(formula_res) ## Cluster group othergroup ID ## 1 downregulated.A downregulated A hsa04974 ## 2 downregulated.A downregulated A hsa04510 ## 3 downregulated.A downregulated A hsa04151 ## 4 downregulated.A downregulated A hsa04512 ## 5 downregulated.B downregulated B hsa03320 ## 6 upregulated.A upregulated A hsa04110 ## Description GeneRatio BgRatio pvalue p.adjust ## 1 Protein digestion and absorption 16/316 103/8087 2.072453e-06 5.699245e-04 ## 2 Focal adhesion 20/316 201/8087 1.083631e-04 1.489993e-02 ## 3 PI3K-Akt signaling pathway 28/316 354/8087 2.804784e-04 2.571052e-02 ## 4 ECM-receptor interaction 11/316 88/8087 5.920352e-04 4.070242e-02 ## 5 PPAR signaling pathway 5/43 76/8087 4.675122e-05 7.199689e-03 ## 6 Cell cycle 20/219 124/8087 9.477515e-11 2.331469e-08 ## qvalue ## 1 5.388377e-04 ## 2 1.408721e-02 ## 3 2.430813e-02 ## 4 3.848229e-02 ## 5 6.791231e-03 ## 6 2.085053e-08 ## geneID ## 1 1281/50509/1290/477/1294/1360/1289/1292/1296/23428/1359/1300/1287/6505/2006/7373 ## 2 55742/2317/7058/25759/56034/3693/3480/5159/857/1292/3908/3909/63923/3913/1287/3679/7060/3479/10451/80310 ## 3 55970/5618/7058/10161/56034/3693/4254/3480/4908/5159/1292/3908/2690/3909/8817/9223/4915/3551/2791/63923/3913/9863/3667/1287/3679/7060/3479/80310 ## 4 7058/3693/3339/1292/3908/3909/63923/3913/1287/3679/7060 ## 5 9370/5105/2167/3158/5346 ## 6 4171/993/990/5347/701/9700/898/23594/4998/9134/4175/4173/10926/6502/994/699/4609/5111/1869/1029 ## Count ## 1 16 ## 2 20 ## 3 28 ## 4 11 ## 5 5 ## 6 20 14.3 Visualization of profile comparison We can visualize the result using the dotplot() method. dotplot(ck) dotplot(formula_res) Figure 14.1: Comparing enrichment results of multiple gene lists. (A) Using a named list of gene clusters, the results were displayed as multiple columns with each one represents an enrichment result of a gene cluster. (B) Using formula interface, the columns represent gene clusters defined by the formula. The fomula interface allows more complicated gene cluster definition. In Figure 14.1B, the gene clusters were defined by two variables (i.e.¬†group that divides genes into upregulated and downregulated and othergroup that divides the genes into two categories of A and B.). The dotplot() function allows us to use one variable to divide the result into different facet and plot the result with other variables in each facet panel (Figure 14.2). dotplot(formula_res, x=&quot;group&quot;) + facet_grid(~othergroup) Figure 14.2: Comparing enrichment results of multiple gene lists defined by multiple variable. The results were visualized as a dot plot with an x-axis representing one level of conditions (the group variable) and a facet panel indicating another level of conditions (the othergroup variable). By default, only top 5 (most significant) categories of each cluster was plotted. User can changes the parameter showCategory to specify how many categories of each cluster to be plotted, and if showCategory was set to NULL, the whole result will be plotted. The dotplot() function tries to make the comparison among different clusters more informative and reasonable. After extracting e.g. 10 categories for each clusters, clusterProfiler tries to collect overlap of these categories among clusters. For example, term A is enriched in all the gene clusters (e.g., g1 and g2) and is in the 10 most significant categories of g1 but not g2. clusterProfiler will capture this information and include term A in g2 cluster to make the comparison in dotplot more reasonable. If users want to ignore these information, they can set includeAll = FALSE in dotplot(), which is not recommended. The dotplot() function accepts a parameter by for setting the scale of dot sizes. The default parameter by is setting to geneRatio, which corresponding to the GeneRatio column of the output. If it was setting to count, the comparison will be based on gene counts, while if setting to rowPercentage, the dot sizes will be normalized by count/(sum of each row). Users can also map the dot size to other derived variable (see Chapter 16). To provide the full information, we also provide number of identified genes in each category (numbers in parentheses) when by is setting to rowPercentage and number of gene clusters in each cluster label (numbers in parentheses) when by is setting to geneRatio, as shown in Figure 14.1. The p-values indicate that which categories are more likely to have biological meanings. The dots in the plot are color-coded based on their corresponding adjusted p-values. Color gradient ranging from red to blue correspond to the order of increasing adjusted p-values. That is, red indicate low p-values (high enrichment), and blue indicate high p-values (low enrichment). Adjusted p-values were filtered out by the threshold giving by the parameter pvalueCutoff, and FDR can be estimated by qvalue. In (Yu et al. 2012), we analyzed the publicly available expression dataset of breast tumour tissues from 200 patients (GSE11121, Gene Expression Omnibus) (Schmidt et al. 2008). We identified 8 gene clusters from differentially expressed genes, and using the compareCluster() function to compare these gene clusters by their enriched biological process. In (Wu et al. 2021), we analyzed the GSE8057 dataset which contains expression data from ovarian cancer cells at multiple time points and under two treatment conditions. Eight groups of DEG lists were analyzed simultaneously using compareCluster() with WikiPathways. The result indicates that the two drgus have distinct effects at the begining but consistent effects in the later stages (Fig. 4 of [wu_clusterprofiler_2021]). 14.4 Summary The comparison function was designed as a framework for comparing gene clusters of any kind of ontology associations, not only groupGO, enrichGO, enrichKEGG, enrichMKEGG, enrichWP and enricher that were provided in this package, but also other biological and biomedical ontologies, including but not limited to enrichPathway, enrichDO, enrichNCG, enrichDGN and enrichMeSH. Chapter 15 Visualization of functional enrichment result Placeholder 15.1 Bar Plot 15.2 Dot plot 15.3 Gene-Concept Network 15.4 Heatmap-like functional classification 15.5 Enrichment Map 15.6 Biological theme comparison 15.7 UpSet Plot 15.8 ridgeline plot for expression distribution of GSEA result 15.9 running score and preranked list of GSEA result 15.10 pubmed trend of enriched terms Chapter 16 dplyr verbs for manipulating enrichment result Placeholder 16.1 filter 16.2 arrange 16.3 select 16.4 mutate 16.5 slice 16.6 summarise Chapter 17 Useful utilities Placeholder 17.1 Translating Biological ID 17.1.1 bitr: Biological Id TranslatoR 17.1.2 bitr_kegg: converting biological IDs using KEGG API 17.2 setReadable: translating gene IDs to human readable symbols 17.3 Parsing GMT files 17.4 GO utilities 17.4.1 drop specific GO terms or level 17.4.2 test GO at sepcific level 17.4.3 reduce redundancy of enriched GO terms A Frequently asked questions Placeholder A.1 How to prepare your own geneList A.2 No gene can be mapped A.3 Showing specific pathways A.4 How to extract genes of a specific term/pathway References "]]
